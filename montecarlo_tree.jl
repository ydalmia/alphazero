import Chess.Move

# typically montecarlo tree is conceptualized as having nodes corresponding
# to different states, and edges representing transitions between states.

# however, the below tree structure stores transitions as nodes, flipping the
# common mental model. this is because alphazero is concerned with storing 
# P, W, N statistics for each transition (move) that it explores. It is is 
# unnecessary to store state (board) of the game, since this can be generated by 
# using the initial state and sequentially applying each transition

mutable struct TreeNode
    isleaf::Bool # at the bottom of the mcts search tree?
    W::Float32 # store the children's Weight
    N::Float32 # ... Count

    A::Union{Move, Nothing}    # UCI move to get here
    P::Float32 # ... Policy
    
    parent::Union{TreeNode, Nothing} # store pointer to parent
    children::Union{Vector{TreeNode}, Nothing} # store pointer to each child node
    
    TreeNode() = new(
        true,
        0.0,
        0.0,
        nothing, 
        0.0, 
        nothing, 
        nothing
    )
end

function TreeNode(a::Move, p::Float32, parent::TreeNode)
    node = TreeNode() 
    node.A = a
    node.P = p
    node.parent = parent
    return node
end

function children_stats(node::TreeNode)
    n = length(node.children)
    W = Array{Float32}(undef, n)
    N = Array{Float32}(undef, n)
    P = Array{Float32}(undef, n)

    for (i, child) in enumerate(node.children)
        W[i] = child.W 
        N[i] = child.N
        P[i] = child.P
    end

    return W, N, P
end

function print_tree(node::TreeNode, depth=0; maxdepth=Inf)
    if depth < maxdepth
        print_node(node, depth)
        if !(node.children === nothing)
            for child in node.children
                print_tree(child, depth+1, maxdepth=maxdepth)
            end
        end
    end
end

function print_node(node::TreeNode, depth)
    if node.N == 0.0
        return
    end
    for _ in 0:depth
        print("  ")
    end
    println("A: ", node.A, "  N: ", node.N, "    W: ", node.W)
end